#include <behaviors.dtsi>
#include <behaviors/rgbled_widget.dtsi>

&caps_word {
    continue-list = <BACKSPACE DELETE DE_UNDER DE_MINUS>;
};

&sk {
    quick-release;
    release-after-ms = <1000>;
};

&mt {
    quick-tap-ms = <220>;
    tapping-term-ms = <220>;
};

&lt {
    flavor = "balanced";
}; 


/ {
    hold-tap {
        lt_del: layer_tap_del {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <220>;
            quick-tap-ms = <220>;
            bindings = <&mo>, <&bspc_del>;
            display-name = "Layer-BSp";
        };

        lt_qt: layer_tap_qt {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <220>;
            quick-tap-ms = <220>;
            bindings = <&mo>, <&qt_grv>;
            display-name = "Layer-Qt";
        };

        lt_e: layer_tap_ad_e {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <220>;
            bindings = <&mo>, <&ad_e>;
            display-name = "Layer-AdE";
        };

        ht_qu: hold_tap_qu {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <220>;
            bindings = <&kp>, <&qu>;
            display-name = "Hold-Qu";
        };
    };
};


#define HM(NAME, DISPLAY_NAME, TAP, HT_KEYPOS, RPI, ...)    \
    NAME: NAME {                                            \
        compatible = "zmk,behavior-hold-tap";               \
        #binding-cells = <2>;                               \
        flavor = "balanced";                                \
        tapping-term-ms = <280>;                            \
        quick-tap-ms = <175>;                               \
        require-prior-idle-ms = <RPI>;                      \
        bindings = <&kp>, <TAP>;                            \
        hold-trigger-key-positions = <HT_KEYPOS THUMBS>;    \
        hold-trigger-on-release;                            \
        display-name = #DISPLAY_NAME;                       \
        __VA_ARGS__                                         \
    };

/ {
    home-row-mod {
        HM(hsl,   HRM Shift Left,      &kp,  KEYS_R,   0, hold-while-undecided;)
        HM(hcl,   HRM Ctrl Left,       &kp,  KEYS_R, 200, hold-while-undecided;)
        HM(hml,   HRM Mods Left,       &kp,  KEYS_R, 200)
        HM(hml_m, HRM Mods-Mouse Left, &mkp, KEYS_R, 200)
        HM(hsr,   HRM Shift Right,     &kp,  KEYS_L,   0, hold-while-undecided;)
        HM(hcr,   HRM Ctrl Right,      &kp,  KEYS_L, 200, hold-while-undecided;)
        HM(hmr,   HRM Mods Left,       &kp,  KEYS_L, 200)
    };
};


#define SM(NAME, DISPLAY_NAME, TAP, SHIFTED)    \
    NAME: NAME {                                \
        compatible = "zmk,behavior-mod-morph";  \
        #binding-cells = <0>;                   \
        bindings = <TAP>, <SHIFTED>;            \
        mods = <(MOD_RSFT|MOD_LSFT)>;           \
        keep-mods = <(MOD_RSFT)>;               \
        display-name = #DISPLAY_NAME;           \
    };

#define CM(NAME, DISPLAY_NAME, TAP, CONTROLED)  \
    NAME: NAME {                                \
        compatible = "zmk,behavior-mod-morph";  \
        #binding-cells = <0>;                   \
        bindings = <TAP>, <CONTROLED>;          \
        mods = <(MOD_RCTL|MOD_LCTL)>;           \
        display-name = #DISPLAY_NAME;           \
    };

#define GM(NAME, DISPLAY_NAME, TAP, GUIED)      \
    NAME: NAME {                                \
        compatible = "zmk,behavior-mod-morph";  \
        #binding-cells = <0>;                   \
        bindings = <TAP>, <GUIED>;              \
        mods = <(MOD_RGUI|MOD_LGUI)>;           \
        display-name = #DISPLAY_NAME;           \
    };

#define MASKED(NAME, DISPLAY_NAME, MODS, BINDING)   \
    NAME: NAME {                                    \
        compatible = "zmk,behavior-mod-morph";      \
        #binding-cells = <0>;                       \
        bindings = <BINDING>, <BINDING>;            \
        mods = <MODS>;                              \
        display-name = #DISPLAY_NAME;               \
    };

/ {
    mod-morph {
        SM(qexcl,    SM Qmark-Excl, &kp DE_QMARK,  &kp DE_EXCL)
        SM(bspc_del, SM BSp-Del,    &kp BSPC,      &kp DEL)

        SM(sqt_dqt,       SM Sqt-Dqt,       &kp DE_SQT,   &kp DE_DQT)
        CM(qt_grv,        CM Qt-Grv,        &sqt_dqt,     &kp DE_ACUTE)
        SM(sqt_dqt_macro, SM Macro Sqt-Dqt, &sqt_macro,   &dqt_macro)
        SM(grv_dgrv,      SM Grv-DGrqu,     &kp DE_GRAVE, &dgrv_macro)

        SM(lpar_lbkt, SM LPar-LBkt,     &kp DE_LPAR, &kp DE_LBKT)
        SM(rpar_rbkt, SM RPar-RBkt,     &kp DE_RPAR, &kp DE_RBKT)
        SM(par_bkt,   SM Macro Par-Bkt, &par_macro,  &bkt_macro)

        SM(lbrc_lt, SM LBrc-LT,       &kp DE_LBRC, &kp DE_LT)
        SM(rbrc_gt, SM RBrc-GT,       &kp DE_RBRC, &kp DE_GT)
        SM(brc_lgt, SM Macro Brc-LGT, &brc_macro,  &lgt_macro)

        SM(p_tab_desk, SM Prev Tab-Desk, &kp LC(LS(TAB)), &kp LC(LG(LEFT)))
        SM(n_tab_desk, SM Next Tab-Desk, &kp LC(TAB), &kp LC(LG(RIGHT)))

        MASKED(left_masked, Masked Left, (MOD_RSFT|MOD_LSFT), &kp LEFT)
        MASKED(u_masked,    Masked U,    (MOD_RSFT|MOD_LSFT), &kp U)
    };
};


#define TD(NAME, DISPLAY_NAME, TAP1, TAP2, ...)                             \
    NAME: NAME {                                                            \
        compatible = "zmk,behavior-tap-dance";                              \
        #binding-cells = <0>;                                               \
        tapping-term-ms = <200>;                                            \
        bindings = <TAP1>, <TAP2> __VA_OPT__(, <)__VA_ARGS__ __VA_OPT__(>); \
        display-name = #DISPLAY_NAME;                                       \
    };

/ {
    tap-dance {
        TD(td_sqt_dqt, Sqt-Dqt, &sqt_dqt, &sqt_dqt_macro)

        TD(bts_0, TD BT0 Sel-Disc, &bts 0, &bt BT_DISC 0)
        TD(bts_1, TD BT1 Sel-Disc, &bts 1, &bt BT_DISC 1)
        TD(bts_2, TD BT2 Sel-Disc, &bts 2, &bt BT_DISC 2)

        TD(kns_lock, TD CLCK-NLCK-SLCK, &kp CLCK, &kp KP_NLCK, &kp SLCK)

        TD(pp_n, TD PlayPause-Next, &kp C_PP, &kp C_NEXT)

        TD(close_reopen, TD Tab Close-Reopen, &mt LA(F4) LC(W), &kp LC(LS(T)))
    };
};


/ {
    tri-state {
        alt_tabber: swapper {
            compatible = "zmk,behavior-tri-state";
            #binding-cells = <0>;
            bindings = <&kt LALT>, <&kp TAB>, <&kt LALT>;
            ignored-key-positions = <RT2 RM1 RM2 RM3>; // arrow keys
            timeout-ms = <5000>;
            display-name = "Swapper";
        };

        sel_word: sel_word {
            compatible = "zmk,behavior-tri-state";
            #binding-cells = <0>;
            bindings = <&sel_word_base>, <&kp LS(LC(RIGHT))>, <&none>;
            tap-ms = <0>;
            display-name = "Select Word";
        };

        sel_line: sel_line {
            compatible = "zmk,behavior-tri-state";
            #binding-cells = <0>;
            bindings = <&sel_line_base>, <&sel_line_next>, <&none>;
            tap-ms = <0>;
            display-name = "Select Line";
        };
    };


    antecedent-morph {
        ad_u: adaptive_u {
            compatible = "zmk,behavior-antecedent-morph";
            #binding-cells = <0>;
            defaults = <&kp U>;
            bindings =   <&kp DE_EQUAL>, <&kp DE_EQUAL>;
            antecedents = <DE_LT           DE_GT>;
            max-delay-ms = <1000>;
            display-name = "Adaptive U";
        };

        ad_comma: adaptive_comma {
            compatible = "zmk,behavior-antecedent-morph";
            #binding-cells = <0>;
            defaults = <&kp DE_COMMA>;
            bindings =   <&kp DE_EQUAL>, <&include_macro>, <&kp DE_FSLH>;
            antecedents = <DE_EXCL         DE_HASH           DE_DOT>;
            max-delay-ms = <1000>;
            display-name = "Adaptive Comma";
        };

        ad_e: adaptive_e {
            compatible = "zmk,behavior-antecedent-morph";
            #binding-cells = <0>;
            defaults = <&kp E>;
            bindings =   <&kp DE_GT>, <&kp DE_GT>, <&kp DE_GT>;
            antecedents = <DE_MINUS     DE_EQUAL     DE_PIPE>;
            max-delay-ms = <1000>;
            display-name = "Adaptive E";
        };
    };
};
